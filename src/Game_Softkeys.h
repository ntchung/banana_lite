private final static int kSoftkeyNone = 0;private final static int kSoftkeyYes = 1;private final static int kSoftkeyNo = 2;private final static int kSoftkeyIGM = 3;private int leftSKType;private int rightSKType;private int iconYesWidth;private int iconNoWidth;private int iconIGMWidth;private boolean isLeftSK;private boolean isRightSK;private int oldLeftSKType;private int oldRightSKType;private void initSoftkeys(){	iconYesWidth = sprButtons.getFrameModuleWidth( Buttons.SOFT_YES_NORMAL, 0 );	iconNoWidth = sprButtons.getFrameModuleWidth( Buttons.SOFT_NO_NORMAL, 0 );	iconIGMWidth = sprButtons.getFrameModuleWidth( Buttons.SOFT_IGM_NORMAL, 0 );		resetSoftkeys();}private final void storeSoftkeys(){	oldLeftSKType = leftSKType;	oldRightSKType = rightSKType;}private final void retrieveSoftkeys(){	leftSKType = oldLeftSKType;	rightSKType = oldRightSKType;}private void resetSoftkeys(){		leftSKType = kSoftkeyNone;	rightSKType = kSoftkeyNone;		wasTouchDownInState = false;}private void setLeftSoftkey( int type ){	leftSKType = type;	wasTouchDownInState = false;}private void setRightSoftkey( int type ){	rightSKType = type;	wasTouchDownInState = false;}private void updateSoftkeys(){	isLeftSK = false;	isRightSK = false;		if( isKeyPressed( SOFT_KEY_LEFT ) )	{		isLeftSK = true;		playSfx( SFX_MENU_HIT );	}	if( isKeyPressed( SOFT_KEY_RIGHT ) )	{		isRightSK = true;		playSfx( SFX_MENU_HIT );	}}private void drawSoftkeys(){	if( isKeyDown( SOFT_KEY_LEFT ) )	{		switch( leftSKType )		{		case kSoftkeyYes:			sprButtons.drawSpriteFrame( Buttons.SOFT_YES_DOWN, 0, canvasHeight );		break;		case kSoftkeyNo:			sprButtons.drawSpriteFrame( Buttons.SOFT_NO_DOWN, 0, canvasHeight );		break;		case kSoftkeyIGM:			sprButtons.drawSpriteFrame( Buttons.SOFT_IGM_DOWN, 0, canvasHeight );		break;				}	}	else	{		switch( leftSKType )		{		case kSoftkeyYes:			sprButtons.drawSpriteFrame( Buttons.SOFT_YES_NORMAL, 0, canvasHeight );		break;		case kSoftkeyNo:			sprButtons.drawSpriteFrame( Buttons.SOFT_NO_NORMAL, 0, canvasHeight );		break;		case kSoftkeyIGM:			sprButtons.drawSpriteFrame( Buttons.SOFT_IGM_NORMAL, 0, canvasHeight );		break;		}	}		if( isKeyDown( SOFT_KEY_RIGHT ) )	{		switch( rightSKType )		{		case kSoftkeyYes:			sprButtons.drawSpriteFrame( Buttons.SOFT_YES_DOWN, canvasWidth - iconYesWidth, canvasHeight );		break;		case kSoftkeyNo:			sprButtons.drawSpriteFrame( Buttons.SOFT_NO_DOWN, canvasWidth - iconNoWidth, canvasHeight );		break;		case kSoftkeyIGM:			sprButtons.drawSpriteFrame( Buttons.SOFT_IGM_DOWN, canvasWidth - iconIGMWidth, canvasHeight );		break;		}	}	else	{		switch( rightSKType )		{		case kSoftkeyYes:			sprButtons.drawSpriteFrame( Buttons.SOFT_YES_NORMAL, canvasWidth - iconYesWidth, canvasHeight );		break;		case kSoftkeyNo:			sprButtons.drawSpriteFrame( Buttons.SOFT_NO_NORMAL, canvasWidth - iconNoWidth, canvasHeight );		break;		case kSoftkeyIGM:			sprButtons.drawSpriteFrame( Buttons.SOFT_IGM_NORMAL, canvasWidth - iconIGMWidth, canvasHeight );		break;		}	}}private final boolean isRightSKDown(){	final boolean res = isRightSK && rightSKType != kSoftkeyNone;	isRightSK = false;	return res;}private final boolean isLeftSKDown(){	final boolean res = isLeftSK && leftSKType != kSoftkeyNone;	isLeftSK = false;	return res;}